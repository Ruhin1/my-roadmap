### **Observer Pattern: ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржзрж╛рж░ржгрж╛**  
**Observer Pattern** ржПржХржЯрж┐ **behavioral design pattern**, ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯ (Subject) ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рж▓рзЗ рждрж╛рж░ рж╕рж╛ржерзЗ рж╕ржВржпрзБржХрзНржд ржЕржирзНржпрж╛ржирзНржп ржЕржмржЬрзЗржХрзНржЯржЧрзБрж▓рзЛ (Observers) рж╕рзНржмрзЯржВржХрзНрж░рж┐рзЯржнрж╛ржмрзЗ ржирзЛржЯрж┐ржлрж╛ржЗ рж╣рзЯ ржПржмржВ ржЖржкржбрзЗржЯ рж╣рзЯред ржПржЯрж┐ ржПржоржи ржХрзНрж╖рзЗрждрзНрж░рзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯ, ржпрзЗржЦрж╛ржирзЗ ржПржХрж╛ржзрж┐ржХ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ state ржПржХржЯрж┐ ржЕржмржЬрзЗржХрзНржЯрзЗрж░ state ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░ ржХрж░рзЗред

---

### **ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ:**
1. **Subject (Observable):**  
   ржПржЯрж┐ рж╕рзЗржЗ ржХрзНрж▓рж╛рж╕, ржпрж╛ ржЕржирзНржп ржЕржмржЬрзЗржХрзНржЯржХрзЗ рждрж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирж╛рзЯред ржПржЯрж┐ ржЕржмржЬрж╛рж░ржнрж╛рж░ржжрзЗрж░ ржПржХржЯрж┐ рждрж╛рж▓рж┐ржХрж╛ ржорзЗржЗржиржЯрзЗржЗржи ржХрж░рзЗ ржПржмржВ рждрж╛ржжрзЗрж░ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рж╛рж░ ржжрж╛рзЯрж┐рждрзНржм ржкрж╛рж▓ржи ржХрж░рзЗред

2. **Observer:**  
   ржПржЯрж┐ рж╕рзЗржЗ ржЕржмржЬрзЗржХрзНржЯ, ржпрж╛ **Subject** ржерзЗржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛рзЯ ржПржмржВ ржкрзНрж░рзЯрзЛржЬржи ржЕржирзБржпрж╛рзЯрзА рж░рзЗрж╕ржкржирзНрж╕ ржХрж░рзЗред

---

### **ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗрж░ ржЙржжрж╛рж╣рж░ржг:**  
ржзрж░рж╛ ржпрж╛ржХ, ржПржХржЯрж┐ ржЗ-ржХржорж╛рж░рзНрж╕ рж╕рж╛ржЗржЯрзЗ ржХрзЛржирзЛ ржкржгрзНржпрзЗрж░ ржжрж╛ржо ржХржорж▓рзЗ, рж╕рзЗржЗ ржкржгрзНржпрзЗрж░ рж╕рж╛ржерзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рж╛ ржЗржЙржЬрж╛рж░ржжрзЗрж░ ржЗржорзЗрж▓ ржмрж╛ ржПрж╕ржПржоржПрж╕рзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржмрзЗред  

---

### **PHP ржХрзЛржб ржЙржжрж╛рж╣рж░ржг: Product Price Notification System**

```php
<?php

// Observer Interface
interface Observer {
    public function update($message);
}

// Subject (Observable) Interface
interface Subject {
    public function attach(Observer $observer);
    public function detach(Observer $observer);
    public function notify();
}

// Concrete Subject: Product
class Product implements Subject {
    private $observers = [];
    private $name;
    private $price;

    public function __construct($name, $price) {
        $this->name = $name;
        $this->price = $price;
    }

    // Attach an observer
    public function attach(Observer $observer) {
        $this->observers[] = $observer;
    }

    // Detach an observer
    public function detach(Observer $observer) {
        $this->observers = array_filter($this->observers, function ($obs) use ($observer) {
            return $obs !== $observer;
        });
    }

    // Notify all observers
    public function notify() {
        foreach ($this->observers as $observer) {
            $observer->update("The price of {$this->name} has changed to {$this->price}.");
        }
    }

    // Set new price
    public function setPrice($price) {
        $this->price = $price;
        $this->notify();
    }
}

// Concrete Observer: EmailNotifier
class EmailNotifier implements Observer {
    private $email;

    public function __construct($email) {
        $this->email = $email;
    }

    public function update($message) {
        echo "Email sent to {$this->email}: {$message}\n";
    }
}

// Concrete Observer: SMSNotifier
class SMSNotifier implements Observer {
    private $phone;

    public function __construct($phone) {
        $this->phone = $phone;
    }

    public function update($message) {
        echo "SMS sent to {$this->phone}: {$message}\n";
    }
}

// Usage Example:

// Create a product
$product = new Product("Laptop", 1000);

// Add observers
$emailNotifier = new EmailNotifier("user1@example.com");
$smsNotifier = new SMSNotifier("1234567890");

$product->attach($emailNotifier);
$product->attach($smsNotifier);

// Change product price
$product->setPrice(900); // Notifies all observers

// Detach an observer and change price again
$product->detach($emailNotifier);
$product->setPrice(800); // Only SMS notifier will be notified
```

---

### **ржЖржЙржЯржкрзБржЯ:**
```
Email sent to user1@example.com: The price of Laptop has changed to 900.
SMS sent to 1234567890: The price of Laptop has changed to 900.
SMS sent to 1234567890: The price of Laptop has changed to 800.
```

---

### **ржХрзЛржб ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:**
1. **Observer Interface:**  
   - `update($message)` ржорзЗржержбржЯрж┐ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗ, ржпрж╛рждрзЗ ржЕржмржЬрж╛рж░ржнрж╛рж░рж░рж╛ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛рзЯред  

2. **Concrete Observers:**  
   - `EmailNotifier` ржПржмржВ `SMSNotifier` рждрж╛ржжрзЗрж░ ржирж┐ржЬрж╕рзНржм рж▓ржЬрж┐ржХ ржжрж┐рзЯрзЗ **update** ржорзЗржержб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рзЗржЫрзЗред  

3. **Subject (Product):**  
   - ржПржЯрж┐ ржЕржмржЬрж╛рж░ржнрж╛рж░ржжрзЗрж░ ржорзЗржЗржиржЯрзЗржЗржи ржХрж░рзЗ ржПржмржВ `setPrice()` ржорзЗржержбрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рзЗред  

4. **Detach:**  
   - ржПржЯрж┐ ржХрзЛржирзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржмржЬрж╛рж░ржнрж╛рж░ржХрзЗ рж╕рж░рж┐рзЯрзЗ ржлрзЗрж▓рж╛рж░ рж╕рзБржпрзЛржЧ ржжрзЗрзЯред  

---

### **ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржХрзНрж╖рзЗрждрзНрж░:**
1. **ржЗ-ржХржорж╛рж░рзНрж╕ рж╕рж┐рж╕рзНржЯрзЗржо:**  
   - ржкржгрзНржпрзЗрж░ рж╕рзНржЯржХ ржмрж╛ ржжрж╛ржо ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ ржЗржЙржЬрж╛рж░ржжрзЗрж░ ржирзЛржЯрж┐ржлрж╛ржЗ ржХрж░рж╛ред  

2. **рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо:**  
   - ржХржирзНржЯрзЗржирзНржЯ ржЖржкржбрзЗржЯ рж╣рж▓рзЗ рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржмрж╛рж░ржжрзЗрж░ ржЬрж╛ржирж╛ржирзЛред  

3. **ржЪрзНржпрж╛ржЯ рж╕рж┐рж╕рзНржЯрзЗржо:**  
   - ржирждрзБржи ржорзЗрж╕рзЗржЬ ржПрж▓рзЗ рж░рж┐рзЯрзЗрж▓-ржЯрж╛ржЗржорзЗ рж╕ржХрж▓ ржЗржЙржЬрж╛рж░ржХрзЗ ржжрзЗржЦрж╛ржирзЛред  

4. **рж▓рж╛ржЗржн ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо:**  
   - рж╕рзНржЯржХ ржорж╛рж░рзНржХрзЗржЯ ржмрж╛ ржХрзНрж░рж┐ржкрзНржЯрзЛржХрж╛рж░рзЗржирзНрж╕рж┐рж░ ржорзВрж▓рзНржп ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗ ржЗржЙржЬрж╛рж░ржжрзЗрж░ ржЬрж╛ржирж╛ржирзЛред  

**Observer Pattern ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗ ржЬржЯрж┐рж▓ рж╕рж┐рж╕рзНржЯрзЗржорзЗрж░ state synchronization ржПржмржВ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржорзНржпрж╛ржирзЗржЬ ржХрж░рждрзЗ ржЦрзБржмржЗ ржЙржкржпрзЛржЧрзАред ЁЯШК**