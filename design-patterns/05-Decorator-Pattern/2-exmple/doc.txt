### **Real-Life Form Validation Using Decorator Pattern**

ржбрзЗржХрзЛрж░рзЗржЯрж░ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ ржлрж░рзНржорзЗрж░ ржЗржиржкрзБржЯ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо рждрзИрж░рж┐ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред ржкрзНрж░рждрж┐ржЯрж┐ ржЗржиржкрзБржЯ ржлрж┐рж▓рзНржбрзЗ ржнрж┐ржирзНржи ржнрж┐ржирзНржи ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржпрзБржХрзНржд ржХрж░рж╛ ржпрж╛ржмрзЗ ржПржмржВ ржПржЗ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржиржЧрзБрж▓рзЛржХрзЗ ржЪрзЗржЗржи ржЖржХрж╛рж░рзЗ ржкрзНрж░рзЯрзЛржЧ ржХрж░рж╛ ржпрж╛ржмрзЗред

---

### **ржХрзЛржб ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯрзЗрж╢ржи:**

#### **Step 1: Validation Interface (Component Interface)**

```php
<?php

interface Validator {
    public function validate($input): bool; // ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржкрж╛рж╕ ржХрж░рж▓рзЗ true, ржирж╛ рж╣рж▓рзЗ false
    public function getErrorMessage(): string; // рждрзНрж░рзБржЯрж┐рж░ ржорзЗрж╕рзЗржЬ
}
```

---

#### **Step 2: Base Validator (Concrete Component)**

```php
<?php

class BaseValidator implements Validator {
    public function validate($input): bool {
        return true; // ржХрзЛржирзЛ ржмрзЗрж╕рж┐ржХ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржирзЗржЗ
    }

    public function getErrorMessage(): string {
        return ""; // рждрзНрж░рзБржЯрж┐рж░ ржорзЗрж╕рзЗржЬ ржирзЗржЗ
    }
}
```

---

#### **Step 3: Validation Decorator (Base Decorator)**

```php
<?php

class ValidationDecorator implements Validator {
    protected $validator;

    public function __construct(Validator $validator) {
        $this->validator = $validator;
    }

    public function validate($input): bool {
        return $this->validator->validate($input);
    }

    public function getErrorMessage(): string {
        return $this->validator->getErrorMessage();
    }
}
```

---

#### **Step 4: Specific Validators (Concrete Decorators)**

##### **Required Field Validator:**
```php
<?php

class RequiredValidator extends ValidationDecorator {
    private $errorMessage = "This field is required.";

    public function validate($input): bool {
        if (trim($input) === "") {
            return false;
        }
        return $this->validator->validate($input);
    }

    public function getErrorMessage(): string {
        return !$this->validate("") ? $this->errorMessage : $this->validator->getErrorMessage();
    }
}
```

##### **Email Format Validator:**
```php
<?php

class EmailValidator extends ValidationDecorator {
    private $errorMessage = "Invalid email format.";

    public function validate($input): bool {
        if (!filter_var($input, FILTER_VALIDATE_EMAIL)) {
            return false;
        }
        return $this->validator->validate($input);
    }

    public function getErrorMessage(): string {
        return !$this->validate("invalid@") ? $this->errorMessage : $this->validator->getErrorMessage();
    }
}
```

##### **Minimum Length Validator:**
```php
<?php

class MinLengthValidator extends ValidationDecorator {
    private $minLength;
    private $errorMessage;

    public function __construct(Validator $validator, $minLength) {
        parent::__construct($validator);
        $this->minLength = $minLength;
        $this->errorMessage = "Minimum length must be {$this->minLength} characters.";
    }

    public function validate($input): bool {
        if (strlen($input) < $this->minLength) {
            return false;
        }
        return $this->validator->validate($input);
    }

    public function getErrorMessage(): string {
        return !$this->validate("") ? $this->errorMessage : $this->validator->getErrorMessage();
    }
}
```

---

#### **Step 5: Usage**

```php
<?php

require_once 'Validator.php';
require_once 'BaseValidator.php';
require_once 'ValidationDecorator.php';
require_once 'RequiredValidator.php';
require_once 'EmailValidator.php';
require_once 'MinLengthValidator.php';

// User input data
$userInput = [
    'name' => '',
    'email' => 'invalid_email',
    'password' => '123'
];

// Validators for 'name' field
$nameValidator = new RequiredValidator(new BaseValidator());

// Validators for 'email' field
$emailValidator = new EmailValidator(new RequiredValidator(new BaseValidator()));

// Validators for 'password' field
$passwordValidator = new MinLengthValidator(new RequiredValidator(new BaseValidator()), 6);

// Validate and display results
echo "Name Validation: \n";
if (!$nameValidator->validate($userInput['name'])) {
    echo $nameValidator->getErrorMessage() . "\n";
}

echo "\nEmail Validation: \n";
if (!$emailValidator->validate($userInput['email'])) {
    echo $emailValidator->getErrorMessage() . "\n";
}

echo "\nPassword Validation: \n";
if (!$passwordValidator->validate($userInput['password'])) {
    echo $passwordValidator->getErrorMessage() . "\n";
}
```

---

### **Sample Output:**
```
Name Validation: 
This field is required.

Email Validation: 
Invalid email format.

Password Validation: 
Minimum length must be 6 characters.
```

---

### **ржХрзЛржбрзЗрж░ ржмрзНржпрж╛ржЦрзНржпрж╛:**

1. **BaseValidator:**  
   - ржмрзЗрж╕рж┐ржХ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржпрж╛ ржбрзЗржХрзЛрж░рзЗржЯрж░ ржкрзНржпрж╛ржЯрж╛рж░рзНржирзЗрж░ ржнрж┐рждрзНрждрж┐ рждрзИрж░рж┐ ржХрж░рзЗред

2. **ValidationDecorator:**  
   - ржПржЯрж┐ ржЕржирзНржпрж╛ржирзНржп ржнрзНржпрж╛рж▓рж┐ржбрзЗржЯрж░ржжрзЗрж░ ржЬржирзНржп ржмрзЗрж╕ ржбрзЗржХрзЛрж░рзЗржЯрж░ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред

3. **Specific Validators:**  
   - ржкрзНрж░рждрж┐ржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи (ржпрзЗржоржи, `RequiredValidator`, `EmailValidator`) ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ ржбрзЗржХрзЛрж░рзЗржЯрж░ рж╣рж┐рж╕рзЗржмрзЗ ржХрж╛ржЬ ржХрж░рзЗред 

4. **Usage:**  
   - ржПржХржЯрж┐ ржЗржиржкрзБржЯрзЗрж░ ржУржкрж░ ржПржХрж╛ржзрж┐ржХ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржкрзНрж░рзЯрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝, ржпрзЗржоржи `RequiredValidator` -> `EmailValidator`ред

---

### **ржмрж╛рж╕рзНрждржм ржЬрзАржмржирзЗ ржмрзНржпржмрж╣рж╛рж░:**

1. **ржЗ-ржХржорж╛рж░рзНрж╕ рж╕рж╛ржЗржЯ:**  
   - ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржлрж░рзНржо ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржиред

2. **ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи ржлрж░рзНржо:**  
   - рж╕рж░ржХрж╛рж░рж┐ ржлрж░рзНржо ржпрзЗржЦрж╛ржирзЗ ржмрж┐ржнрж┐ржирзНржи ржХрзНрж╖рзЗрждрзНрж░рзЗрж░ рждржерзНржп рж╕ржарж┐ржХ рж╣ржУржпрж╝рж╛ ржЖржмрж╢рзНржпржХред

3. **ржбрзЗржЯрж╛ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ:**  
   - ржЗржиржкрзБржЯ ржбрзЗржЯрж╛ ржХрзНрж▓рж┐ржи ржУ ржнрзНржпрж╛рж▓рж┐ржб рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржиред

ржПржЗ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи ржкрзНрж░рж╕рзЗрж╕ржХрзЗ рж╕рж╣ржЬ ржПржмржВ ржоржбрзБрж▓рж╛рж░ ржХрж░рзЗ, ржпрж╛ ржкрж░ржмрж░рзНрждрзАрждрзЗ рж╕рж╣ржЬрзЗ ржЖржкржЧрзНрж░рзЗржб ржХрж░рж╛ ржпрж╛ржпрж╝ред ЁЯШК