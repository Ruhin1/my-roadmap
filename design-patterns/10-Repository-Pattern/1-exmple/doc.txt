### Repository Pattern: বিস্তারিত সহজে ব্যাখ্যা

**Repository Pattern** হলো এমন একটি ডিজাইন প্যাটার্ন, যা ডেটা অ্যাক্সেস লজিক এবং বিজনেস লজিককে আলাদা করে। Repository মূলত ডেটাবেস থেকে ডেটা ফেচ, স্টোর বা আপডেট করার জন্য একটি মধ্যস্থ অবজেক্ট হিসেবে কাজ করে। এটি সরাসরি ডেটাবেস কোয়েরি লেখার পরিবর্তে ডেটা অ্যাক্সেসের একটি স্ট্যান্ডার্ড ইন্টারফেস প্রদান করে।

---

### কেন Repository Pattern ব্যবহার করবেন?

1. **কোড রিইউজএবলিটি:** ডেটা অ্যাক্সেস লজিক এক জায়গায় রাখায় কোড পুনঃব্যবহারযোগ্য হয়।  
2. **বিজনেস লজিকের বিচ্ছিন্নতা:** ডেটা কোয়েরি লজিক এবং বিজনেস লজিক আলাদা রাখায় কোড ক্লিন এবং মেইনটেইন করা সহজ।  
3. **ডেটাবেস পরিবর্তন সহজ:** আপনি সহজেই ডেটাবেস পরিবর্তন করতে পারেন (যেমন MySQL থেকে MongoDB)।  
4. **টেস্টেবল:** কোড সহজে টেস্ট করা যায় কারণ ডেটা অ্যাক্সেস এবং অ্যাপ্লিকেশন লজিক আলাদা।  

---

### Repository Pattern-এর গঠন

1. **Entity Class:**  
   ডেটাবেস টেবিলের প্রতিফলন।  

2. **Repository Interface:**  
   ডেটা অ্যাক্সেসের জন্য স্ট্যান্ডার্ড মেথড ডিফাইন করে।  

3. **Repository Implementation Class:**  
   ডেটাবেস অপারেশন বাস্তবায়িত করে।  

4. **Service/Controller:**  
   Repository-এর মাধ্যমে ডেটা অ্যাক্সেস করে এবং বিজনেস লজিক বাস্তবায়ন করে।  

---

### বাস্তব উদাহরণ: **Task Management System**

ধরা যাক, একটি অ্যাপ্লিকেশনে টাস্ক ম্যানেজমেন্ট মডিউল আছে। এখানে আমরা টাস্ক যুক্ত করা, ফেচ করা, আপডেট করা, বা মুছে ফেলার লজিক Repository Pattern ব্যবহার করে লিখবো।

---

### কোড উদাহরণ

#### Step 1: **Entity Class (Task.php)**

```php
<?php
namespace App\Entities;

class Task {
    public $id;
    public $title;
    public $description;
    public $status;

    public function __construct($id, $title, $description, $status) {
        $this->id = $id;
        $this->title = $title;
        $this->description = $description;
        $this->status = $status;
    }
}
```

---

#### Step 2: **Repository Interface (TaskRepositoryInterface.php)**

```php
<?php
namespace App\Repositories;

interface TaskRepositoryInterface {
    public function getAllTasks();
    public function getTaskById($id);
    public function createTask($task);
    public function updateTask($id, $task);
    public function deleteTask($id);
}
```

---

#### Step 3: **Repository Implementation (TaskRepository.php)**

```php
<?php
namespace App\Repositories;

use App\Entities\Task;

class TaskRepository implements TaskRepositoryInterface {
    private $tasks = [];

    public function __construct() {
        // Sample Data
        $this->tasks[] = new Task(1, "Learn PHP", "Study PHP basics", "pending");
        $this->tasks[] = new Task(2, "Write Code", "Complete Repository Pattern example", "completed");
    }

    public function getAllTasks() {
        return $this->tasks;
    }

    public function getTaskById($id) {
        foreach ($this->tasks as $task) {
            if ($task->id == $id) {
                return $task;
            }
        }
        return null;
    }

    public function createTask($task) {
        $this->tasks[] = $task;
    }

    public function updateTask($id, $task) {
        foreach ($this->tasks as &$existingTask) {
            if ($existingTask->id == $id) {
                $existingTask = $task;
                return;
            }
        }
    }

    public function deleteTask($id) {
        $this->tasks = array_filter($this->tasks, function ($task) use ($id) {
            return $task->id != $id;
        });
    }
}
```

---

#### Step 4: **Controller/Service (TaskController.php)**

```php
<?php
namespace App\Controllers;

use App\Repositories\TaskRepository;
use App\Entities\Task;

class TaskController {
    private $taskRepository;

    public function __construct(TaskRepository $taskRepository) {
        $this->taskRepository = $taskRepository;
    }

    public function index() {
        $tasks = $this->taskRepository->getAllTasks();
        foreach ($tasks as $task) {
            echo "Task ID: {$task->id}, Title: {$task->title}, Status: {$task->status}\n";
        }
    }

    public function create($title, $description, $status) {
        $newTask = new Task(rand(100, 999), $title, $description, $status);
        $this->taskRepository->createTask($newTask);
        echo "Task created successfully.\n";
    }

    public function update($id, $title, $description, $status) {
        $updatedTask = new Task($id, $title, $description, $status);
        $this->taskRepository->updateTask($id, $updatedTask);
        echo "Task updated successfully.\n";
    }

    public function delete($id) {
        $this->taskRepository->deleteTask($id);
        echo "Task deleted successfully.\n";
    }
}

// Usage Example
$repository = new TaskRepository();
$controller = new TaskController($repository);

echo "All Tasks:\n";
$controller->index();

echo "\nAdding a New Task:\n";
$controller->create("Learn Laravel", "Study the basics of Laravel", "pending");

echo "\nAll Tasks After Adding:\n";
$controller->index();

echo "\nUpdating Task ID 1:\n";
$controller->update(1, "Learn PHP Advanced", "Study advanced topics in PHP", "in-progress");

echo "\nAll Tasks After Update:\n";
$controller->index();

echo "\nDeleting Task ID 2:\n";
$controller->delete(2);

echo "\nAll Tasks After Deletion:\n";
$controller->index();
```

---

### আউটপুট

```
All Tasks:
Task ID: 1, Title: Learn PHP, Status: pending
Task ID: 2, Title: Write Code, Status: completed

Adding a New Task:
Task created successfully.

All Tasks After Adding:
Task ID: 1, Title: Learn PHP, Status: pending
Task ID: 2, Title: Write Code, Status: completed
Task ID: 837, Title: Learn Laravel, Status: pending

Updating Task ID 1:
Task updated successfully.

All Tasks After Update:
Task ID: 1, Title: Learn PHP Advanced, Status: in-progress
Task ID: 2, Title: Write Code, Status: completed
Task ID: 837, Title: Learn Laravel, Status: pending

Deleting Task ID 2:
Task deleted successfully.

All Tasks After Deletion:
Task ID: 1, Title: Learn PHP Advanced, Status: in-progress
Task ID: 837, Title: Learn Laravel, Status: pending
```

---

### উপসংহার

**Repository Pattern** এমন সব জায়গায় গুরুত্বপূর্ণ যেখানে ডেটাবেস অপারেশনগুলো বিজনেস লজিক থেকে আলাদা করা প্রয়োজন। এটি ডেটা অ্যাক্সেস এবং কোড মেইনটেইন করার জন্য বিশেষ উপকারী।