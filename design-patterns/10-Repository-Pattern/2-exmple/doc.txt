### একটি সহজ উদাহরণ: Repository Pattern

ধরা যাক, আমাদের একটি ছোট অ্যাপ্লিকেশন আছে, যেখানে ব্যবহারকারীর তথ্য (যেমন নাম, ইমেইল) ম্যানেজ করতে হবে। আমরা Repository Pattern ব্যবহার করে এটি সহজভাবে কিভাবে পরিচালনা করা যায়, তা দেখবো।

---

### ধাপ ১: **Entity Class (User.php)**

```php
<?php
namespace App\Entities;

class User {
    public $id;
    public $name;
    public $email;

    public function __construct($id, $name, $email) {
        $this->id = $id;
        $this->name = $name;
        $this->email = $email;
    }
}
```

এই ক্লাসটি ব্যবহারকারীর তথ্য সংরক্ষণ করার জন্য ব্যবহৃত হবে।

---

### ধাপ ২: **Repository Interface (UserRepositoryInterface.php)**

```php
<?php
namespace App\Repositories;

interface UserRepositoryInterface {
    public function getAllUsers();
    public function getUserById($id);
    public function createUser($user);
    public function deleteUser($id);
}
```

এখানে ডেটা ম্যানিপুলেশনের জন্য প্রয়োজনীয় মেথড ডিফাইন করা হয়েছে।

---

### ধাপ ৩: **Repository Implementation (UserRepository.php)**

```php
<?php
namespace App\Repositories;

use App\Entities\User;

class UserRepository implements UserRepositoryInterface {
    private $users = [];

    public function __construct() {
        // কিছু ডামি ডেটা যোগ করা হলো
        $this->users[] = new User(1, "Ruhin", "ruhin@gmail.com");
        $this->users[] = new User(2, "Tonmoy", "tonmoy@gmail.com");
    }

    public function getAllUsers() {
        return $this->users;
    }

    public function getUserById($id) {
        foreach ($this->users as $user) {
            if ($user->id == $id) {
                return $user;
            }
        }
        return null;
    }

    public function createUser($user) {
        $this->users[] = $user;
    }

    public function deleteUser($id) {
        $this->users = array_filter($this->users, function ($user) use ($id) {
            return $user->id != $id;
        });
    }
}
```

---

### ধাপ ৪: **Controller (UserController.php)**

```php
<?php
namespace App\Controllers;

use App\Repositories\UserRepository;
use App\Entities\User;

class UserController {
    private $userRepository;

    public function __construct(UserRepository $userRepository) {
        $this->userRepository = $userRepository;
    }

    public function showAllUsers() {
        $users = $this->userRepository->getAllUsers();
        foreach ($users as $user) {
            echo "ID: {$user->id}, Name: {$user->name}, Email: {$user->email}\n";
        }
    }

    public function addUser($name, $email) {
        $newId = rand(100, 999); // নতুন ব্যবহারকারীর জন্য একটি র‍্যান্ডম আইডি তৈরি করা হলো
        $newUser = new User($newId, $name, $email);
        $this->userRepository->createUser($newUser);
        echo "User added successfully.\n";
    }

    public function deleteUser($id) {
        $this->userRepository->deleteUser($id);
        echo "User deleted successfully.\n";
    }
}

// ব্যবহার করার উদাহরণ
$repository = new UserRepository();
$controller = new UserController($repository);

// সমস্ত ব্যবহারকারী দেখানো
echo "All Users:\n";
$controller->showAllUsers();

// নতুন ব্যবহারকারী যোগ করা
echo "\nAdding a New User:\n";
$controller->addUser("Maruf", "maruf@gmail.com");

// সমস্ত ব্যবহারকারী দেখানো
echo "\nAll Users After Adding:\n";
$controller->showAllUsers();

// ব্যবহারকারী মুছে ফেলা
echo "\nDeleting User with ID 1:\n";
$controller->deleteUser(1);

// সমস্ত ব্যবহারকারী দেখানো
echo "\nAll Users After Deletion:\n";
$controller->showAllUsers();
```

---

### আউটপুট

```
All Users:
ID: 1, Name: Ruhin, Email: ruhin@gmail.com
ID: 2, Name: Tonmoy, Email: tonmoy@gmail.com

Adding a New User:
User added successfully.

All Users After Adding:
ID: 1, Name: Ruhin, Email: ruhin@gmail.com
ID: 2, Name: Tonmoy, Email: tonmoy@gmail.com
ID: 847, Name: Maruf, Email: maruf@gmail.com

Deleting User with ID 1:
User deleted successfully.

All Users After Deletion:
ID: 2, Name: Tonmoy, Email: tonmoy@gmail.com
ID: 847, Name: Maruf, Email: maruf@gmail.com
```

---

### ব্যাখ্যা

1. **ডেটা ম্যানেজমেন্ট সহজ:** ডেটাবেস কোয়েরির বদলে আমরা Repository ব্যবহার করে ডেটা ম্যানিপুলেট করেছি।
2. **কোড রিইউজএবল:** `UserRepository` বারবার ব্যবহারযোগ্য।
3. **পরিবর্তন সহজ:** যদি ডেটা সঞ্চয়ের পদ্ধতি (যেমন ডেটাবেস, ফাইল ইত্যাদি) পরিবর্তন করতে হয়, শুধুমাত্র Repository আপডেট করতে হবে।

---

### উপসংহার

**Repository Pattern** ব্যবহার করলে ডেটা অ্যাক্সেস লজিক এবং অ্যাপ্লিকেশন লজিক আলাদা রাখা যায়, যা কোডের ক্লিনলিনেস এবং মেইনটেইনেবিলিটি বাড়ায়।