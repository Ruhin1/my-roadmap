PHP-তে সবচেয়ে বেশি ব্যবহৃত ডিজাইন প্যাটার্নগুলো হলো:

---

### **১. Singleton Pattern**
- **উদ্দেশ্য:** একটি ক্লাসের শুধুমাত্র একটি ইনস্ট্যান্স তৈরি নিশ্চিত করে এবং গ্লোবাল অ্যাক্সেস প্রদান করে।
- **ব্যবহার:** ডেটাবেস কানেকশন বা কনফিগারেশন সেটিংস ম্যানেজ করতে।

---

### **২. Factory Pattern**
- **উদ্দেশ্য:** নির্দিষ্ট অবজেক্ট তৈরির কাজ সরলীকৃত করে এবং অবজেক্টের তৈরির লজিককে মেইন কোড থেকে আলাদা করে।
- **ব্যবহার:** ডাইনামিক অবজেক্ট ক্রিয়েশন (যেমন: বিভিন্ন ধরণের পেমেন্ট গেটওয়ে ইন্টিগ্রেশন)।

---

### **৩. Strategy Pattern**
- **উদ্দেশ্য:** একাধিক অ্যালগরিদম বা আচরণকে আলাদা ক্লাসে ইমপ্লিমেন্ট করা এবং রানটাইমে একটি নির্দিষ্ট স্ট্র্যাটেজি নির্বাচন করা।
- **ব্যবহার:** যেমন: ডাটাবেস কোয়েরি অপ্টিমাইজেশন বা পেমেন্ট প্রসেসিং।

---

### **৪. Observer Pattern**
- **উদ্দেশ্য:** একাধিক অবজেক্টকে একটি সাবজেক্টের পরিবর্তন সম্পর্কে নোটিফাই করা।
- **ব্যবহার:** ইভেন্ট লিসেনার, লগিং সিস্টেম, বা নোটিফিকেশন সিস্টেমে।

---

### **৫. Decorator Pattern**
- **উদ্দেশ্য:** একটি অবজেক্টে নতুন ফিচার যোগ করার সময় তার মেইন স্ট্রাকচার বা কোড পরিবর্তন না করে এক্সটেনশন প্রোভাইড করা।
- **ব্যবহার:** ফর্ম ভ্যালিডেশন বা ফাইল লজিক মডিফিকেশনে।

---

### **৬. MVC (Model-View-Controller)**
- **উদ্দেশ্য:** কোডকে Model, View, এবং Controller-এ বিভক্ত করে কোড রিডেবিলিটি এবং মেনটেইনেবিলিটি উন্নত করা।
- **ব্যবহার:** Laravel, CodeIgniter, Symfony ইত্যাদিতে।

---

### **৭. Dependency Injection**
- **উদ্দেশ্য:** ক্লাসের নির্ভরশীলতাগুলো (dependencies) সরাসরি ক্লাসে না রেখে বাহ্যিকভাবে সরবরাহ করা।
- **ব্যবহার:** কনস্ট্রাক্টর বা সেটার মেথডের মাধ্যমে ডাটাবেস কানেকশন বা সার্ভিস প্রোভাইড করা।

---

### **৮. Builder Pattern**
- **উদ্দেশ্য:** জটিল অবজেক্ট তৈরির প্রক্রিয়াকে ছোট ছোট ধাপে ভাগ করা।
- **ব্যবহার:** ডাইনামিক ফর্ম জেনারেশন বা জটিল কনফিগারেশন অবজেক্ট তৈরি।

---

### **৯. Proxy Pattern**
- **উদ্দেশ্য:** একটি অবজেক্টের অ্যাক্সেস কন্ট্রোল বা এর ব্যবহারের আগে কিছু প্রি-প্রসেসিং করা।
- **ব্যবহার:** API রিকোয়েস্ট বা ক্যাশ ম্যানেজমেন্ট।

---

### **১০. Repository Pattern**
- **উদ্দেশ্য:** ডাটাবেস অপারেশনকে অ্যাপ্লিকেশন লজিক থেকে আলাদা রাখা।
- **ব্যবহার:** Laravel-এ ডাটাবেস কোয়েরি ম্যানেজ করতে।

---

### **১১. Adapter Pattern**
- **উদ্দেশ্য:** দুই অমিল সিস্টেম বা ইন্টারফেসের মধ্যে সামঞ্জস্য তৈরি করা।
- **ব্যবহার:** একটি নতুন API-এর সাথে পুরানো কোড ইন্টিগ্রেট করতে।

---

### **১২. Chain of Responsibility Pattern**
- **উদ্দেশ্য:** একাধিক অবজেক্ট দ্বারা একটি রিকোয়েস্ট প্রসেস করার জন্য একটি চেইন তৈরি করা।
- **ব্যবহার:** HTTP রিকোয়েস্ট প্রসেসিং বা মেথড চেইনিং।

---

### **১৩. Facade Pattern**
- **উদ্দেশ্য:** একটি সরল ইন্টারফেস প্রদান করা যা একটি কমপ্লেক্স সিস্টেমের বিভিন্ন অংশ একত্রে এক্সপোজ করে।
- **ব্যবহার:** যেমন: ফাইল আপলোড বা পেমেন্ট প্রসেসিং।

---

### **কেন এগুলো বেশি ব্যবহৃত?**
- এই ডিজাইন প্যাটার্নগুলো PHP-এর ফ্লেক্সিবিলিটি ও স্কেলেবিলিটি বাড়ায়।
- Laravel, Symfony-এর মতো ফ্রেমওয়ার্কগুলোর ভিত্তি এই ডিজাইন প্যাটার্নগুলোর উপর নির্ভরশীল।
- কোড মেনটেইন করা সহজ হয় এবং বড় প্রজেক্টে রিইউজেবিলিটি বাড়ায়।

Explain the 'Facade Pattern' in detail. Give an example of how the 'Facade Pattern' might be needed in real life?
-------------
