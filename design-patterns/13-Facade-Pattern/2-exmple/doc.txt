### **Another Real-Life Example: Email Sending System**

ধরা যাক, আপনি একটি সিস্টেমে ইমেইল পাঠানোর ব্যবস্থা তৈরি করতে চান। ইমেইল পাঠানোর জন্য আপনাকে বিভিন্ন ধাপ সম্পন্ন করতে হবে, যেমন:

1. **Compose Email**: ইমেইল কন্টেন্ট তৈরি করা।  
2. **Validate Email**: ইমেইল ঠিকানা যাচাই করা।  
3. **Send Email**: ইমেইল সার্ভারের মাধ্যমে ইমেইল পাঠানো।  

এগুলো ম্যানেজ করতে একাধিক ক্লাস বা সাবসিস্টেম দরকার। Facade Pattern ব্যবহার করে এই জটিলতাকে সরল করা যায়।

---

### **Implementation**

#### Step 1: Create Subsystems

```php
<?php
// Subsystem 1: Email Content Creation
class EmailComposer {
    public function compose($to, $subject, $message) {
        return [
            'to' => $to,
            'subject' => $subject,
            'message' => $message
        ];
    }
}

// Subsystem 2: Email Validation
class EmailValidator {
    public function validate($email) {
        if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return true;
        } else {
            echo "Invalid email address: $email\n";
            return false;
        }
    }
}

// Subsystem 3: Email Sender
class EmailSender {
    public function send($emailData) {
        // Dummy logic to simulate email sending
        echo "Sending email to: {$emailData['to']}\n";
        echo "Subject: {$emailData['subject']}\n";
        echo "Message: {$emailData['message']}\n";
        return true;
    }
}
?>
```

---

#### Step 2: Create the Facade

```php
<?php
class EmailFacade {
    private $composer;
    private $validator;
    private $sender;

    public function __construct() {
        $this->composer = new EmailComposer();
        $this->validator = new EmailValidator();
        $this->sender = new EmailSender();
    }

    public function sendEmail($to, $subject, $message) {
        echo "Processing email...\n";

        // Step 1: Validate email address
        if (!$this->validator->validate($to)) {
            return false;
        }

        // Step 2: Compose email
        $emailData = $this->composer->compose($to, $subject, $message);

        // Step 3: Send email
        return $this->sender->send($emailData);
    }
}
?>
```

---

#### Step 3: Client Code

```php
<?php
// Client Code
$emailFacade = new EmailFacade();
$emailFacade->sendEmail('test@example.com', 'Hello World', 'This is a test email.');
?>
```

---

### **Output**

```
Processing email...
Sending email to: test@example.com
Subject: Hello World
Message: This is a test email.
```

---

### **Explanation of the Code**

1. **Subsystems:**
   - `EmailComposer`: ইমেইল কন্টেন্ট তৈরি করে।  
   - `EmailValidator`: ইমেইল ঠিকানা যাচাই করে।  
   - `EmailSender`: ইমেইল পাঠানোর দায়িত্বে।  

2. **Facade:**
   - `EmailFacade` এই তিনটি সাবসিস্টেমকে একত্র করে একটি সহজ ইন্টারফেস প্রদান করে।  
   - ক্লায়েন্টকে তিনটি সাবসিস্টেমের কাজ জানার প্রয়োজন নেই।  

3. **Client Code:**
   - ক্লায়েন্ট সরাসরি `EmailFacade` ব্যবহার করে। ফলে কোড সহজ এবং পরিষ্কার হয়।  

---

### **Advantages in Real-Life Use Case**

1. **Simplified Email Sending:**  
   - ইমেইল পাঠানোর প্রক্রিয়া সহজ হয়।  
2. **Reusability:**  
   - সাবসিস্টেম আলাদা হওয়ায় সহজেই রিইউজ করা যায়।  
3. **Scalability:**  
   - নতুন ফিচার যোগ করতে হলে Facade-এ সংশোধন করলেই হবে, ক্লায়েন্ট কোডে নয়।  

---

### **Another Practical Use Case:**
আপনি যদি Laravel বা Symfony-এর মতো ফ্রেমওয়ার্ক ব্যবহার করেন, সেখানে ইমেইল লজিক Facade প্যাটার্নের মাধ্যমে ইমপ্লিমেন্ট করা হয়, যা ডেভেলপারের জন্য কাজকে অনেক সহজ করে তোলে।